apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-ford
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.22.0"
    tekton.dev/tags: buildah, cli, bash
    tekton.dev/categories: Image Build
    tekton.dev/displayName: "buildah-ford"
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a
    container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: 'The format of the built container, oci or docker'
      name: FORMAT
      type: string
    - default: ''
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: ''
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string
      
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests
      type: string
      default: "http://internet.ford.com:83"

    - name: httpsProxy
      description: HTTPS proxy server for SSL requests
      type: string
      default: "http://internet.ford.com:83"

    - name: noProxy
      description: no proxy - opt out of proxying HTTP/HTTPS requests
      type: string
      default: "localhost,127.0.0.1,.ford.com,.local,.internal,.googleapis.com,.svc, google.internal,https://19.0.0.0/8,136.1.0.0/16,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - image: $(params.BUILDER_IMAGE)
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 500Mi
      name: build
      env:
        - name: "HTTP_PROXY"
          value: $(params.httpProxy)
        - name: "HTTPS_PROXY"
          value: $(params.httpsProxy)
        - name: "http_proxy"
          value: $(params.httpProxy)
        - name: "https_proxy"
          value: $(params.httpProxy)
        - name: "noproxy"
          value: $(params.noProxy)
        - name: "noProxy"
          value: $(params.noProxy)
      script: |
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - image: $(params.BUILDER_IMAGE)
      name: push
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 500Mi
      script: |
        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - image: $(params.BUILDER_IMAGE)
      name: digest-to-results
      resources: {}
      script: >-
        cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source

